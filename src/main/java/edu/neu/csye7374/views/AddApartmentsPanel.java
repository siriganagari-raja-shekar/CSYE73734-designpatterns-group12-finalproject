/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.csye7374.views;

import edu.neu.csye7374.Builder.ApartmentBuilder;
import edu.neu.csye7374.Apartment;
import edu.neu.csye7374.ApartmentAPI;
import edu.neu.csye7374.ApartmentCategory;
import edu.neu.csye7374.Factory.ApartmentFactory;
import edu.neu.csye7374.fileUtil.GeneralFileUtil;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class AddApartmentsPanel extends javax.swing.JPanel {

    private List<ApartmentAPI> apartmentList = new ArrayList<>();
    private static AddApartmentsPanel instance = null;
    private MainFrame mainFrameRef;
    private String APARTMENTS_FILE_NAME = "ApartmentsData.txt";
    private static String MFR_FILE_NAME = "MgmtData.csv";

    /**
     * Creates new form AddApartmentsPanel
     */
    public AddApartmentsPanel() {
        initComponents();
        loadData();
    }

    public static AddApartmentsPanel getInstance() {
        if (instance == null) {
            instance = new AddApartmentsPanel();
        }
        return instance;
    }

    public List<ApartmentAPI> getApartmentList() {
        return this.apartmentList;

    }

    private void loadData() {
        List<String> rawData = GeneralFileUtil.readFile(APARTMENTS_FILE_NAME);
        for (String line : rawData) {
            ApartmentBuilder apartmentBuilder = new ApartmentBuilder(line);
            apartmentList.add(apartmentBuilder.build());
        }
        populateApartmentsTable();
        
        List<String> rawManData = GeneralFileUtil.readFile(MFR_FILE_NAME);
        apartmentManagement.removeAllItems();
        for (String line : rawManData) {
            apartmentManagement.addItem(line.strip().split(",")[0]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        apartmentsTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        apartmentCreateBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        apartmentAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        apartmentPrice = new javax.swing.JTextField();
        apartmentManagement = new javax.swing.JComboBox<>();
        apartmentCategory = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        apartmentsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Apartment Id", "Address", "Category", "Management", "Buy Price", "Rent Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        apartmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apartmentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(apartmentsTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Mgmt. Name");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new Color(204, 0, 0));
        jLabel9.setText("Add Your Apartment Here");

        apartmentCreateBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        apartmentCreateBtn.setText("Create");
        apartmentCreateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                apartmentCreateBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                apartmentCreateBtnMouseExited(evt);
            }
        });
        apartmentCreateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentCreateBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Address");

        apartmentAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentAddressActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Category");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Price");

        apartmentPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentPriceActionPerformed(evt);
            }
        });

        apartmentManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apartmentManagementMouseClicked(evt);
            }
        });
        apartmentManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentManagementActionPerformed(evt);
            }
        });

        apartmentCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "STUDIO", "FLAT", "TOWNHOUSE", "PENTHOUSE", "CONDO" }));
        apartmentCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentCategoryActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setForeground(new Color(204, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Add Apartments");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(354, 354, 354))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(apartmentCreateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 726, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(apartmentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(apartmentManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(369, 369, 369)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(apartmentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(apartmentCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(287, 287, 287)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apartmentAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(apartmentCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apartmentPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6)
                    .addComponent(apartmentManagement, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(apartmentCreateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(279, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void apartmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apartmentsTableMouseClicked
//        // TODO add your handling code here:
//        if(booksTable.getSelectedRow() != -1){
//            Book book = booksList.get(booksTable.getSelectedRow());
//            apartmentId.setText(book.getId());
//            apartmentAddress.setText(book.getBookName());
//            apartmentPrice.setText(book.getBookAuthor());
//            apartmentMgmt.setText(book.getBookPublisher());
//            apartmentCategory.setText(String.valueOf(book.getBookEdition()));
//            bookQuantity.setText(String.valueOf(book.getBookQuantity()));
//            booksRemaining.setText(String.valueOf(book.getRemainingBooks()));
//            bookCreateBtn.setEnabled(false);
//            bookUpdateBtn.setEnabled(true);
//            bookDeleteBtn.setEnabled(true);
//            apartmentId.setEnabled(false);
//        }
//        else{
//            apartmentId.setText("");
//            apartmentAddress.setText("");
//            apartmentPrice.setText("");
//            apartmentMgmt.setText("");
//            apartmentCategory.setText("");
//            bookQuantity.setText("");
//            booksRemaining.setText("");
//            bookCreateBtn.setEnabled(true);
//            bookUpdateBtn.setEnabled(false);
//            bookDeleteBtn.setEnabled(false);
//        }


    }//GEN-LAST:event_apartmentsTableMouseClicked

    private void apartmentCreateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apartmentCreateBtnMouseEntered
        // TODO add your handling code here:
        apartmentCreateBtn.setBackground(new Color(0, 0, 0));
        apartmentCreateBtn.setForeground(new Color(255, 255, 255));
    }//GEN-LAST:event_apartmentCreateBtnMouseEntered

    private void apartmentCreateBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apartmentCreateBtnMouseExited
        // TODO add your handling code here:
        apartmentCreateBtn.setBackground(new Color(255, 255, 255));
        apartmentCreateBtn.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_apartmentCreateBtnMouseExited

    private void apartmentCreateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentCreateBtnActionPerformed
        // TODO add your handling code here:
        
        int maxId = -1;
        
        for(ApartmentAPI apartment: apartmentList){
           maxId = Math.max(maxId, apartment.getApartmentId());            
        }
        int id = maxId + 1;
        String name = apartmentAddress.getText();
        double price = Double.parseDouble(apartmentPrice.getText());
        String mgmt = apartmentManagement.getSelectedItem().toString();
        String category = apartmentCategory.getSelectedItem().toString();
        ApartmentCategory categoryEnumVal = ApartmentCategory.getApartmentCategory(category.toLowerCase());

//        if(apartmentList.stream().map(apartment -> apartment.getApartmentId()).toList().contains("id")){
//            JOptionPane.showMessageDialog(this, "Apartment with this ID already exists");
//            return;
//        }
        ApartmentBuilder apartmentBuilder = new ApartmentBuilder(id, name, price, categoryEnumVal, mgmt);
        ApartmentAPI apartment = ApartmentFactory.getInstance().getObject(apartmentBuilder);
        apartmentList.add((Apartment) apartment);
//      OperatingSystem.getInstance().writeBooks();

        String lineToFile = id + "," + name + "," + category + "," + mgmt + "," + price ;
        GeneralFileUtil.writeFile(APARTMENTS_FILE_NAME, lineToFile, false);

        
        apartmentAddress.setText("");
        apartmentPrice.setText("");
        
        populateApartmentsTable();


    }//GEN-LAST:event_apartmentCreateBtnActionPerformed

    private void apartmentAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apartmentAddressActionPerformed

    private void apartmentPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apartmentPriceActionPerformed

    private void apartmentManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentManagementActionPerformed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_apartmentManagementActionPerformed

    private void apartmentCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apartmentCategoryActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void apartmentManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apartmentManagementMouseClicked
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_apartmentManagementMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> apartmentCategory;
    private javax.swing.JButton apartmentCreateBtn;
    private javax.swing.JComboBox<String> apartmentManagement;
    private javax.swing.JTextField apartmentAddress;
    private javax.swing.JTextField apartmentPrice;
    private javax.swing.JTable apartmentsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void populateApartmentsTable() {
        DefaultTableModel model = (DefaultTableModel) apartmentsTable.getModel();
        model.setRowCount(0);

         for(ApartmentAPI apartment : apartmentList){
            Object[] row = new Object[6];
            
            String[] apartmentString = apartment.toString().split(",");
            int i;
            for (i = 0; i < 5; i++) {
                row[i] = apartmentString[i];
            }
            row[i] = apartment.getApartmentRentPrice();
            
            model.addRow(row);
        }
    }

    void setMainFrame(MainFrame aThis) {
        this.mainFrameRef = aThis;
    }
}
