/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.neu.csye7374.views;

import edu.neu.csye7374.Apartment;
import edu.neu.csye7374.ApartmentAPI;
import edu.neu.csye7374.Command.Invoker;
import edu.neu.csye7374.Decorator.ApartmentDecorator;
import edu.neu.csye7374.Decorator.DoorbellCameraDecorator;
import edu.neu.csye7374.Decorator.CarpetingDecorator;
import edu.neu.csye7374.Facade.ApartmentHandoverMethod;
import edu.neu.csye7374.Facade.ApartmentAgreementFacade;
import edu.neu.csye7374.Observer.ApartmentAgreement;
import edu.neu.csye7374.fileUtil.FileUtil;
import edu.neu.csye7374.fileUtil.GeneralFileUtil;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.swing.ButtonModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.UUID;

public class AgreementPanel extends javax.swing.JPanel {
    private static AgreementPanel instance=null;

    
    private ApartmentAPI selectedApartment = null;
    private ApartmentAgreement currentAgreement = null;
    private MainFrame mainFrameRef;
    private List<ApartmentAgreement> oldAgreements = null;
    private String AGREEMENTS_FILE_NAME = "AgreementsData.csv";

    /**
     * Creates new form StartAgreementPanel
     */
    public AgreementPanel() {
        initComponents();
        startupTasks();
    }
    
    
    public static AgreementPanel getInstance(){
        if(instance == null){
            instance= new AgreementPanel();
        }
        return instance;
    }
    
    void setMainFrame(MainFrame aThis) {
        this.mainFrameRef = aThis;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        purchaseOptions = new javax.swing.ButtonGroup();
        handoverOptions = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        apartmentsTable = new javax.swing.JTable();
        insurance = new javax.swing.JCheckBox();
        doorbellcamera = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        carpetings = new javax.swing.JCheckBox();
        applyDecoratorsAndNext = new javax.swing.JButton();
        selectApartment = new javax.swing.JButton();
        apartmentsRefreshBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buyRBtn = new javax.swing.JRadioButton();
        rentRBtn = new javax.swing.JRadioButton();
        inpersonRBtn = new javax.swing.JRadioButton();
        handoverRBtn = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(793, 581));
        setPreferredSize(new java.awt.Dimension(793, 581));

        apartmentsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Apartment Id", "Address", "Category", "Management", "Buy Price", "Rent Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        apartmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                apartmentsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(apartmentsTable);

        insurance.setSelected(true);
        insurance.setText("Insurance (Mandatory)");
        insurance.setEnabled(false);
        insurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insuranceActionPerformed(evt);
            }
        });

        doorbellcamera.setText("Doorbell Camera");
        doorbellcamera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doorbellcameraActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Additional Modifications");

        carpetings.setText("Carpetings");

        applyDecoratorsAndNext.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        applyDecoratorsAndNext.setText("Next");
        applyDecoratorsAndNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                applyDecoratorsAndNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                applyDecoratorsAndNextMouseExited(evt);
            }
        });
        applyDecoratorsAndNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyDecoratorsAndNextActionPerformed(evt);
            }
        });

        selectApartment.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        selectApartment.setText("Select Apartment");
        selectApartment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectApartmentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                selectApartmentMouseExited(evt);
            }
        });
        selectApartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectApartmentActionPerformed(evt);
            }
        });

        apartmentsRefreshBtn.setText("Refresh");
        apartmentsRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apartmentsRefreshBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Purchase options");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Handover Method");

        purchaseOptions.add(buyRBtn);
        buyRBtn.setText("Buy");

        purchaseOptions.add(rentRBtn);
        rentRBtn.setText("Rent");

        handoverOptions.add(inpersonRBtn);
        inpersonRBtn.setText("In-Person");
        inpersonRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inpersonRBtnActionPerformed(evt);
            }
        });

        handoverOptions.add(handoverRBtn);
        handoverRBtn.setText("Digital");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel10.setForeground(new Color(204, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Add Management");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyDecoratorsAndNext, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 781, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addGap(216, 216, 216)
                        .addComponent(apartmentsRefreshBtn)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buyRBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(rentRBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inpersonRBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(handoverRBtn))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(insurance)
                                .addGap(18, 18, 18)
                                .addComponent(doorbellcamera)
                                .addGap(18, 18, 18)
                                .addComponent(carpetings))
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(apartmentsRefreshBtn))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(buyRBtn)
                    .addComponent(rentRBtn))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(inpersonRBtn)
                    .addComponent(handoverRBtn))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insurance)
                    .addComponent(doorbellcamera)
                    .addComponent(carpetings))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(applyDecoratorsAndNext, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void apartmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apartmentsTableMouseClicked
        if(apartmentsTable.getSelectedRow() != -1){
            int selected = apartmentsTable.getSelectedRow();
            UUID apartmentId = UUID.fromString(apartmentsTable.getValueAt(selected, 0).toString());
            for(ApartmentAPI apartment: AddApartmentsPanel.getInstance().getApartmentList()){
                if(apartment.getApartmentId().equals(apartmentId)){
                    this.selectedApartment = apartment;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a apartment");
        }
    }//GEN-LAST:event_apartmentsTableMouseClicked

    private void insuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insuranceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insuranceActionPerformed

    private void applyDecoratorsAndNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyDecoratorsAndNextMouseEntered
        // TODO add your handling code here:
        applyDecoratorsAndNext.setBackground(new Color(0,0,0));
        applyDecoratorsAndNext.setForeground(new Color(255,255,255));
    }//GEN-LAST:event_applyDecoratorsAndNextMouseEntered

    private void applyDecoratorsAndNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyDecoratorsAndNextMouseExited
        // TODO add your handling code here:
        applyDecoratorsAndNext.setBackground(new Color(255,255,255));
        applyDecoratorsAndNext.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_applyDecoratorsAndNextMouseExited

    private void applyDecoratorsAndNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyDecoratorsAndNextActionPerformed
        // TODO add your handling code here:
        if(selectedApartment == null){
            JOptionPane.showMessageDialog(this, "Please select a apartment before proceeding");
        }else{
            ButtonModel purchaseOptionsSelection= purchaseOptions.getSelection();
            if(purchaseOptionsSelection != null){
                Invoker invoker= new Invoker();
                ArrayList<Apartment> selectedApartments= new ArrayList<>();
                selectedApartments.add((Apartment) this.selectedApartment);
                
                String val= "";
                if(rentRBtn.isSelected()){
                    val="rent";
                }else{
                    val="buy";
                }
                
                if(val.equalsIgnoreCase("rent")){
                    invoker.rentApartmentAgreements(selectedApartments);
                }else{
                    invoker.placeApartmentAgreements(selectedApartments);
                }
            }
            
            ApartmentAgreementFacade agreementFacade = new ApartmentAgreementFacade(selectedApartment);
            this.currentAgreement= agreementFacade.apartmentAgreement();
            this.selectedApartment = agreementFacade.getApartment();
            
            ButtonModel handoverOptionsSelection= handoverOptions.getSelection();
            if(handoverOptionsSelection != null){
                if(inpersonRBtn.isSelected()){
                    this.currentAgreement.setApartmentHandoverMethod(ApartmentHandoverMethod.In_Person);
                }else{
                    this.currentAgreement.setApartmentHandoverMethod(ApartmentHandoverMethod.Digital);
                }
            }

            if(rentRBtn.isSelected()){
                this.currentAgreement.setSaleType("Rent");
            } else {
                this.currentAgreement.setSaleType("Sale");
            }
            
            if(doorbellcamera.isSelected()){
                ApartmentDecorator decoratedApartment= new DoorbellCameraDecorator(selectedApartment);
                this.selectedApartment = decoratedApartment;
            }
            
            if(carpetings.isSelected()){
                ApartmentDecorator decoratedApartment= new CarpetingDecorator(selectedApartment);
                this.selectedApartment = decoratedApartment;
            }
            
            
            AgreementSummary os= AgreementSummary.getInstance();
            os.setMainFrame(mainFrameRef);
            os.setActiveApartment(this.selectedApartment);
            os.setActiveAgreement(this.currentAgreement);
            os.setLabelValues();
            this.selectedApartment = null;
            this.currentAgreement = null;
            this.purchaseOptions.clearSelection();
            this.handoverOptions.clearSelection();
            this.doorbellcamera.setSelected(false);
            this.carpetings.setSelected(false);
            this.mainFrameRef.getMainSplitPanel().setRightComponent(os);
            this.apartmentsTable.clearSelection();
        }
    }//GEN-LAST:event_applyDecoratorsAndNextActionPerformed

    private void selectApartmentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectApartmentMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_selectApartmentMouseEntered

    private void selectApartmentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectApartmentMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_selectApartmentMouseExited

    private void selectApartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectApartmentActionPerformed
        // TODO add your handling code here:
        if(apartmentsTable.getSelectedRow() != -1){
            int selected = apartmentsTable.getSelectedRow();
            UUID apartmentId = UUID.fromString(apartmentsTable.getValueAt(selected, 0).toString());
            for(ApartmentAPI apartment: AddApartmentsPanel.getInstance().getApartmentList()){
                if(apartment.getApartmentId().equals(apartmentId)){
                    this.selectedApartment = apartment;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a apartment");
        }
    }//GEN-LAST:event_selectApartmentActionPerformed

    private void apartmentsRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apartmentsRefreshBtnActionPerformed
        // TODO add your handling code here:
        startupTasks();
    }//GEN-LAST:event_apartmentsRefreshBtnActionPerformed

    private void doorbellcameraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doorbellcameraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_doorbellcameraActionPerformed

    private void inpersonRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpersonRBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inpersonRBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyDecoratorsAndNext;
    private javax.swing.JRadioButton buyRBtn;
    private javax.swing.JButton apartmentsRefreshBtn;
    private javax.swing.JTable apartmentsTable;
    private javax.swing.JCheckBox doorbellcamera;
    private javax.swing.ButtonGroup handoverOptions;
    private javax.swing.JRadioButton handoverRBtn;
    private javax.swing.JCheckBox insurance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton inpersonRBtn;
    private javax.swing.ButtonGroup purchaseOptions;
    private javax.swing.JRadioButton rentRBtn;
    private javax.swing.JCheckBox carpetings;
    private javax.swing.JButton selectApartment;
    // End of variables declaration//GEN-END:variables

    private Set<String> getPastApartmentAddressesFromAgreements(){
        List<String> agreements = GeneralFileUtil.readFile(AGREEMENTS_FILE_NAME);

        System.out.println("Data from file util: " + agreements.toString());

        Set<String> apartmentAddresses = new HashSet();

        for(String agreement: agreements){
            apartmentAddresses.add(agreement.split(",")[0]);
        }

        return apartmentAddresses;

    }

    private void startupTasks(){
        

        DefaultTableModel model = (DefaultTableModel) apartmentsTable.getModel();
        model.setRowCount(0);
        List<ApartmentAPI> apartmentList= new ArrayList<>(AddApartmentsPanel.getInstance().getApartmentList());

        Set<String> pastSoldApartments = getPastApartmentAddressesFromAgreements();

        List<ApartmentAPI> finalApartments = apartmentList.stream().filter(a -> !pastSoldApartments.contains(a.getApartmentAddress())).toList();

        for(ApartmentAPI apartment : finalApartments){
            Object[] row = new Object[6];
            
            String[] apartmentString = apartment.toString().split(",");
            int i;
            for (i = 0; i < 5; i++) {
                row[i] = apartmentString[i];
            }
            row[i] = apartment.getApartmentRentPrice();
            
            model.addRow(row);
        }
        apartmentsTable.clearSelection();
    }
}
